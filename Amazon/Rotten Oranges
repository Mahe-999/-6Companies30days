class Solution {
public:
    bool check(vector<vector<int>>& grid,int i,int j,int n,int m)
    {
        if(i>=0 && i<n && j>=0 && j<m && grid[i][j]==1)
        {
            grid[i][j]=2;
            return true;
        }
        return false;
    }
    int orangesRotting(vector<vector<int>>& grid) 
    {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>>q;
        int zero=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push(make_pair(i,j));
                }
                if(grid[i][j]==0)
                {
                    zero++;
                }
            }
        }
        if(zero==n*m)
        {
            return 0;
        }
        int time=-1;
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                int f=q.front().first;
                int s=q.front().second;
                q.pop();
                if(check(grid,f+1,s,n,m))
                {
                    q.push({f+1,s});
                }
                if(check(grid,f-1,s,n,m))
                {
                    q.push({f-1,s});
                }
                if(check(grid,f,s+1,n,m))
                {
                    q.push({f,s+1});
                }
                if(check(grid,f,s-1,n,m))
                {
                    q.push({f,s-1});
                }
            }
            time++;
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    return -1;
                }
            }
        }
        return time;
    }
};
