class Solution{
    public:
    void dfs(stack<int>&st,vector<bool>&visited,int src,vector<int>adj[])
    {
        visited[src]=true;
        for(auto it:adj[src])
        {
            if(!visited[it])
            {
                dfs(st,visited,it,adj);
            }
        }
        st.push(src);
    }
    string topological(vector<int>adj[],int k)
    {
        stack<int>st;
        vector<bool>visited(k,false);
        for(int i=0;i<k;i++)
        {
            if(!visited[i])
            {
                dfs(st,visited,i,adj);
            }
        }
        string str="";
        while(!st.empty())
        {
            str+=(st.top()+'a');
            st.pop();
        }
        return str;
    }
    string findOrder(string dict[], int n, int k) 
    {
        //code here
        vector<int>adj[k];
        for(int i=1;i<n;i++)
        {
            string word1=dict[i-1];
            string word2=dict[i];
            for(int j=0;j<min(word1.length(),word2.length());j++)
            {
                if(word1[j]!=word2[j])
                {
                    int index1=word1[j]-'a';
                    int index2=word2[j]-'a';
                    adj[index1].push_back(index2);
                    break;
                }
            }
        }
        return topological(adj,k);
    }
};
